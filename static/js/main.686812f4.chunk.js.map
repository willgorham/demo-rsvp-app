{"version":3,"sources":["Invitee.js","NewInviteeForm.js","InviteeCounter.js","App.js","serviceWorker.js","index.js"],"names":["Invitee","_ref","invitee","handleEditing","toggleIsConfirmed","toggleIsEditing","removeInvitee","react_default","a","createElement","className","isConfirmed","key","id","isEditing","type","value","name","onChange","e","target","checked","onClick","NewInviteeForm","pendingInvitee","handleNewInvitee","handlePendingInvitee","onSubmit","placeholder","InviteeCounter","invitees","inviteeCount","length","attendingCount","filter","i","App","state","onlyShowConfirmed","_this","setState","preventDefault","generateId","concat","Object","toConsumableArray","handleOnlyShowConfirmedChange","toggleProperty","property","map","ids","this","Math","max","apply","_this2","href","src_NewInviteeForm","src_InviteeCounter","src_Invitee","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.686812f4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Invitee({\n  invitee,\n  handleEditing,\n  toggleIsConfirmed,\n  toggleIsEditing,\n  removeInvitee\n}) {\n\n  return (\n    <li className={invitee.isConfirmed ? 'responded' : null} key={invitee.id}>\n      {\n        invitee.isEditing\n          ? <input\n              type=\"text\"\n              value={invitee.name}\n              onChange={(e) => handleEditing(e.target.value, invitee.id)}\n            />\n          : <span>{invitee.name}</span>\n      }\n      <label>\n        <input\n          type=\"checkbox\"\n          checked={invitee.isConfirmed}\n          onChange={() => toggleIsConfirmed(invitee.id)}\n        /> Confirmed\n      </label>\n      <button onClick={() => toggleIsEditing(invitee.id)}>\n        {invitee.isEditing ? 'save' : 'edit'}\n      </button>\n      <button onClick={() => removeInvitee(invitee.id)}>remove</button>\n    </li>\n  );\n}\n\nInvitee.propTypes = {\n  invitee: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    isConfirmed: PropTypes.bool.isRequired,\n    isEditing: PropTypes.bool.isRequired,\n  }).isRequired,\n  handleEditing: PropTypes.func.isRequired,\n  toggleIsConfirmed: PropTypes.func.isRequired,\n  toggleIsEditing: PropTypes.func.isRequired,\n  removeInvitee: PropTypes.func.isRequired,\n}\n\nexport default Invitee;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction NewInviteeForm({\n  pendingInvitee,\n  handleNewInvitee,\n  handlePendingInvitee\n}) {\n\n  return (\n    <form onSubmit={handleNewInvitee}>\n      <input type=\"text\" value={pendingInvitee} placeholder=\"Invite Someone\" onChange={handlePendingInvitee} />\n      <button type=\"submit\" name=\"submit\" value=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nNewInviteeForm.propTypes = {\n  pendingInvitee: PropTypes.string.isRequired,\n  handleNewInvitee: PropTypes.func.isRequired,\n  handlePendingInvitee: PropTypes.func.isRequired,\n}\n\nexport default NewInviteeForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction InviteeCounter({ invitees }) {\n  const inviteeCount = invitees.length;\n  const attendingCount = invitees.filter(i => i.isConfirmed).length;\n\n  return (\n    <table className=\"counter\">\n      <tbody>\n        <tr>\n          <td>Attending:</td>\n          <td>{attendingCount}</td>\n        </tr>\n        <tr>\n          <td>Unconfirmed:</td>\n          <td>{inviteeCount - attendingCount}</td>\n        </tr>\n        <tr>\n          <td>Total:</td>\n          <td>{inviteeCount}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nInviteeCounter.propTypes = {\n  invitees: PropTypes.arrayOf(PropTypes.shape({\n    isConfirmed: PropTypes.bool.isRequired,\n  })).isRequired,\n}\n\nexport default InviteeCounter;\n","import React, { Component } from 'react';\nimport Invitee from './Invitee';\nimport NewInviteeForm from './NewInviteeForm';\nimport InviteeCounter from './InviteeCounter';\n\nclass App extends Component {\n\n  state = {\n    pendingInvitee: '',\n    invitees: [],\n    onlyShowConfirmed: false,\n  };\n\n  generateId() {\n    const ids = this.state.invitees.map(invitee => invitee.id);\n    return ids.length ? Math.max(...ids) + 1 : 0;\n  }\n\n  handlePendingInvitee = (e) => {\n    this.setState({\n      pendingInvitee: e.target.value,\n    });\n  }\n\n  handleNewInvitee = (e) => {\n    e.preventDefault();\n    this.setState(state => ({\n      pendingInvitee: '',\n      invitees: [\n        {\n          id: this.generateId(),\n          name: state.pendingInvitee,\n          isConfirmed: false,\n          isEditing: false,\n        },\n        ...state.invitees,\n      ],\n    }));\n\n  }\n\n  handleOnlyShowConfirmedChange = (e) => {\n    this.setState({\n      onlyShowConfirmed: e.target.checked,\n    });\n  }\n\n  toggleProperty = (property, id) => {\n    this.setState( state => {\n      const invitees = state.invitees.map(invitee => {\n        if (invitee.id === id) {\n          invitee[property] = !invitee[property];\n        }\n\n        return invitee;\n      });\n\n      return { invitees };\n    });\n  }\n\n  toggleIsConfirmed = (id) => this.toggleProperty('isConfirmed', id);\n\n  toggleIsEditing = (id) => this.toggleProperty('isEditing', id);\n\n  handleEditing = (name, id) => {\n    this.setState( state => {\n      const invitees = state.invitees.map(invitee => {\n        if (invitee.id === id) {\n          invitee.name = name;\n        }\n\n        return invitee;\n      });\n\n      return { invitees };\n    })\n  }\n\n  removeInvitee = (id) => {\n    this.setState( state => ({\n      invitees: state.invitees.filter(invitee => invitee.id !== id),\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>RSVP</h1>\n          <p><a className=\"github-link\" href=\"https://willgorham.github.io/demo-rsvp-app/\">View the source on GitHub</a></p>\n          <NewInviteeForm\n            pendingInvitee={this.state.pendingInvitee}\n            handleNewInvitee={this.handleNewInvitee}\n            handlePendingInvitee={this.handlePendingInvitee}\n          />\n        </header>\n        <div className=\"main\">\n          <div>\n            <h2>Invitees</h2>\n            <label>\n              <input type=\"checkbox\" onChange={this.handleOnlyShowConfirmedChange} /> Hide those who haven't responded\n            </label>\n          </div>\n          <InviteeCounter invitees={this.state.invitees} />\n          <ul>\n            {this.state.pendingInvitee &&\n              <li className=\"pending\"><span>{this.state.pendingInvitee}</span></li>\n            }\n            {this.state.invitees\n              .filter(invitee => !this.state.onlyShowConfirmed || invitee.isConfirmed)\n              .map(invitee => (\n                <Invitee\n                  invitee={invitee}\n                  key={invitee.id}\n                  handleEditing={this.handleEditing}\n                  toggleIsConfirmed={this.toggleIsConfirmed}\n                  toggleIsEditing={this.toggleIsEditing}\n                  removeInvitee={this.removeInvitee}\n                />\n              ))\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}